template< typename Element >
void Tool::IO::loadILDG(Core::Field< Element > *field, std::string const &filename)
{

  Base::Weave weave(field->L(), field->T());

  (weave.d_grid.grid()).Barrier();

  int nprocs((weave.d_grid.grid()).Get_size());
  int rank((weave.d_grid.grid()).Get_rank());

  size_t const blockSize = (weave.d_grid).contiguousBlock();
  size_t const numBlocks = weave.localVolume()/blockSize;

  size_t globalDimSize[4];
  globalDimSize[Base::idx_T] = field->L()*field->L()*field->L();
  globalDimSize[Base::idx_Z] = field->L()*field->L();
  globalDimSize[Base::idx_Y] = field->L();
  globalDimSize[Base::idx_X] = 1;

  size_t jumpS[4] = {0, 0, 0, 0}; // information where to jump
  size_t jumpN[4] = {weave.localVolume(), weave.localVolume(),
                     weave.localVolume(), weave.localVolume()
                    }; // information when to perform which jump

  if (numBlocks > 1)
  {
    // determine "lowest" dimension that is distributed to more than 1 process
    size_t idx(0);
    while (((weave.d_grid).dim(idx) == 1) && (idx < 4))
      ++idx;
    assert(idx < 3); // this should not happen, because there have to be at least
    // two distributed dimensions for more than one contiguous block per process
    if(idx == Base::idx_Z) // assume that the index is 2
    {
      jumpS[idx] = globalDimSize[Base::idx_T];
      jumpN[idx] = 1;
    }
    else if(idx == Base::idx_Y) // assume that the index is 1
    {
      jumpS[idx  ] = globalDimSize[Base::idx_Z];
      jumpS[idx+1] = globalDimSize[Base::idx_Z]*((((weave.d_grid).dim(Base::idx_Z)-1)*(weave.d_grid).size(Base::idx_Z))+1);
      jumpN[idx  ] = 1;
      jumpN[idx+1] = (weave.d_grid).size(idx+1);
    }
    else if(idx == Base::idx_X) // assume that the index is 0
    {
      jumpS[idx  ] = globalDimSize[Base::idx_Y];
      jumpS[idx+1] = globalDimSize[Base::idx_Y]*((((weave.d_grid).dim(Base::idx_Y)-1)*(weave.d_grid).size(Base::idx_Y))+1);
      jumpS[idx+2] = jumpS[idx+1]
                     + globalDimSize[Base::idx_Z]*((((weave.d_grid).dim(Base::idx_Z)-1)*(weave.d_grid).size(Base::idx_Z)));
      jumpN[idx  ] = 1;
      jumpN[idx+1] = (weave.d_grid).size(idx+1);
      jumpN[idx+2] = jumpN[idx+1]*(weave.d_grid).size(idx+2);
    }
  }


  size_t const *coords = (weave.d_grid).coords();

  unsigned long elem_offset(0);

  // each node has to find his own offset
  for (size_t idx = 0; idx < 4; idx++)
  {
    // offset in each dimension is the process' coordinate index times the
    // global size of (one "slice" of) this direction times the local size in this direction
    elem_offset += coords[idx] * globalDimSize[idx] * ((weave.d_grid).size(idx));
  }

  assert(elem_offset < weave.globalVolume());

  weave.barrier();


  Lime::Reader reader(filename);
  if(!reader.good())
  {
    if(weave.isRoot())
      std::cerr << "Error occured trying to open file: " << filename << std::endl;
  }
  assert(reader.good());

  ILDGinfo *info = 0;

  // since this is causing problems in massive parallelization, the following block is
  // processed serially
  for (int irank=0; irank<nprocs; irank++)
  {
    if (rank == irank)
    {
      info = new ILDGinfo(reader);

      reader.retrieveRecord(reader.findRecord("ildg-binary-data"));
      if (reader.fail())
      {
        std::cerr << "Lime reader could not find the record, check path and file, and check lime contents of file.\nField unchanged!.\n";
        exit(EXIT_FAILURE);
        return;
      }
      assert(reader.good());
    }
    (weave.d_grid.grid()).Barrier();
  }

  assert(reader.good());

  Element *dataPtr;

  for (size_t idxBlock = 0; idxBlock < numBlocks; idxBlock++)
  {

    dataPtr = field->raw() + idxBlock * blockSize;

    //go to position from which the data is supposed to be read
    if (info->precision.compare("64") == 0)
      reader.seekg(elem_offset*sizeof(Element), reader.findRecord("ildg-binary-data"));
    else
      reader.seekg(elem_offset*sizeof(Element)/2, reader.findRecord("ildg-binary-data"));


    if (info->precision.compare("64") == 0)
    {
      reader.read(dataPtr, blockSize);
      if (!Base::bigEndian)
        Base::swapEndian(dataPtr, dataPtr + blockSize, sizeof(double));
    }
    else
    {
      size_t const elSize = sizeof(Element) / sizeof(double);
      uint32_t elem32[elSize];
      for (size_t ctr = 0; ctr < blockSize; ++ctr, ++dataPtr)
      {
        reader.read(elem32, elSize);
        if (!Base::bigEndian)
          Base::swapEndian(elem32, elem32 + elSize);
        std::copy(reinterpret_cast< float* >(elem32), reinterpret_cast< float* >(elem32) + elSize,
                  reinterpret_cast< double* >(dataPtr));
      }
    }

    elem_offset += (idxBlock+1) % jumpN[Base::idx_Z] == 0 ? jumpS[Base::idx_Z] :
                   (idxBlock+1) % jumpN[Base::idx_Y] == 0 ? jumpS[Base::idx_Y] : jumpS[Base::idx_X];
  }

  delete info;

  (weave.d_grid.grid()).Barrier();
}
