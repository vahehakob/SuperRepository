template< typename Element >
void Base::Weave::fieldShift(Base::SpaceTimeIndex const idx, Base::Direction const dir, Element *field, size_t const *offsets) const
{
  //std::cout << "call of Base::Weave::barrier() in Base::Weave::fieldShift(...)" << std::endl;
  barrier();

  // Determine what to send
  // Create a basic datatype for the element -- we want to be agnostic about this
  MPI::Datatype etype(MPI::BYTE.Create_contiguous(sizeof(Element)));
  etype.Commit();

  // Set up arrays for the MPI subarray
  int sizes[4];
  std::copy(d_grid.sizes(), d_grid.sizes() + 4, sizes);

  int subsizes[4];
  std::copy(sizes, sizes + 4, subsizes);
  subsizes[idx] = 1;

  int starts[4];
  std::fill(starts, starts + 4, 0);
  starts[idx] = offsets[idx];
  if (dir == dir_UP)
    starts[idx] = (starts[idx] + sizes[idx] - 1) % sizes[idx];

  /*
    std::cout << "starts:";
    for(size_t mu = 0; mu < 4; mu++)
    {
      std::cout << " ";
      std::cout.width(4);
      std::cout << starts[mu];
    }
    std::cout << std::endl;

    std::cout << "sizes:";
    for(size_t mu = 0; mu < 4; mu++)
    {
      std::cout << " ";
      std::cout.width(4);
      std::cout << sizes[mu];
    }
    std::cout << std::endl;

    std::cout << "subsizes:";
    for(size_t mu = 0; mu < 4; mu++)
    {
      std::cout << " ";
      std::cout.width(4);
      std::cout << subsizes[mu];
    }
    std::cout << std::endl;*/


  // Create a subarray for the surface we need
  // Note that the order is column mayor order (reflected by MPI::ORDER_FORTRAN)
  MPI::Datatype surface(etype.Create_subarray(4, sizes, subsizes, starts, MPI::ORDER_FORTRAN));
  surface.Commit();

  int source_rank, dest_rank;
  // The MPI cartesian communicator tells us where to send the data and from where to recieve
  (d_grid.grid()).Shift(idx, dir, source_rank, dest_rank);

//   std::cout << "rank " << rank() << " is sending to rank " << dest_rank << " and recieving from rank " << source_rank << std::endl;

  // Send the data indicated by the subarray to our neighbours
  (d_grid.grid()).Sendrecv_replace(field, 1, surface,
                                   // send own data in direction, recieve data from opposite direction
                                   dest_rank, 1 /* sendtag */, source_rank,  1 /* recvtag */);

  barrier();


  // Clear up any resources we claimed
  surface.Free();
  etype.Free();
}
