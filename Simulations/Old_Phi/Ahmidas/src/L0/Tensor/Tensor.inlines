// Specialized implementations
template< typename Scalar, size_t Dim >
inline Tensor< Scalar, Dim, 0 >::operator Scalar&()
{
  return d_data;
}

template< typename Scalar, size_t Dim >
inline Tensor< Scalar, Dim, 0 >::operator Scalar const &() const
{
  return d_data;
}

template< typename Scalar, size_t Dim >
inline Tensor< Scalar, Dim, 0 >::Tensor()
{}

template< typename Scalar, size_t Dim >
inline Tensor< Scalar, Dim, 0 >::Tensor(Scalar const &data)
  : d_data(data)
{}

template< typename Scalar, size_t Dim >
inline Tensor< Scalar, Dim, 0 >::Tensor(Scalar *array)
  : d_data(*array)
{}

template< typename Scalar, size_t Dim >
inline Tensor< Scalar, Dim, 0 >::Tensor(VectorXs const &vec)
  : d_data(vec[0])
{}

template< typename Scalar, size_t Dim >
inline Scalar &Tensor< Scalar, Dim, 0 >::linear()
{
  return d_data;
}

// Generic implementations
template< typename Scalar, size_t Dim, size_t Rank >
inline Tensor< Scalar, Dim, Rank >::Tensor()
  : d_data(VectorXs::Zero())
{}

template< typename Scalar, size_t Dim, size_t Rank >
inline Tensor< Scalar, Dim, Rank >::Tensor(Scalar *array)
  : d_data(array)
{}

template< typename Scalar, size_t Dim, size_t Rank >
inline Tensor< Scalar, Dim, Rank >::Tensor(typename Tensor< Scalar, Dim, Rank >::VectorXs const &vec)
  : d_data(vec)
{}

template< typename Scalar, size_t Dim, size_t Rank >
inline typename Tensor< Scalar, Dim, Rank >::VectorXs &Tensor< Scalar, Dim, Rank >::linear()
{
  return d_data;
}

template< typename Scalar, size_t Dim, size_t Rank >
inline typename Tensor< Scalar, Dim, Rank >::VectorXs const &Tensor< Scalar, Dim, Rank >::linear() const
{
  return d_data;
}

template< typename Scalar, size_t Dim, size_t Rank >
inline Tensor< Scalar, Dim, Rank >::operator VectorXs &()
{
  return d_data;
}

template< typename Scalar, size_t Dim, size_t Rank >
inline Tensor< Scalar, Dim, Rank >::operator VectorXs const &() const
{
  return d_data;
}

template< typename Scalar, size_t Dim, size_t Rank >
template< size_t Value >
inline Eigen::Map< typename Tensor< Scalar, Dim, Rank >::MatrixXs , 0, Eigen::Stride< Dim, 1 >, TIter< Scalar, Dim, Rank, Value > > Tensor< Scalar, Dim, Rank >::operator[](Index< Value >)
{
  return Eigen::Map< MatrixXs, 0, Eigen::Stride< Dim, 1 >, TIter< Scalar, Dim, Rank, Value > >(d_data.data());
}
