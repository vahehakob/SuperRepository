template< size_t Dim >
void Clifford< Dim >::generateGamma()
{
  // Generate should only be called if s_gamma is uninitialized.
  assert(!s_gamma);

  s_gamma = new GMatrix[Dim];

  Clifford< Dim - 1 > clow; // This actually implements a recursive routine.
  for (size_t idx = 0; idx < ((Dim - 1) / 2); ++idx)
  {
    s_gamma[idx] = GMatrix::Zero();
    s_gamma[idx].topLeftCorner(SpinorDim< Dim - 1 >::value, SpinorDim< Dim - 1 >::value) = clow.gamma()[idx];
    s_gamma[idx].bottomRightCorner(SpinorDim< Dim - 1 >::value, SpinorDim< Dim - 1 >::value) = -clow.gamma()[idx];
  }

  if (Dim % 2)
  {
    s_gamma[Dim - 2] = GMatrix::Zero();
    s_gamma[Dim - 2].topRightCorner(SpinorDim< Dim - 1 >::value, SpinorDim< Dim - 1 >::value) = _ciI * Clifford< Dim - 1 >::GMatrix::Identity();
    s_gamma[Dim - 2].bottomRightCorner(SpinorDim< Dim - 1 >::value, SpinorDim< Dim - 1 >::value) = _ciI * Clifford< Dim - 1 >::GMatrix::Identity();

    s_gamma[Dim - 1] = GMatrix::Zero();
    s_gamma[Dim - 1].topRightCorner(SpinorDim< Dim - 1 >::value, SpinorDim< Dim - 1 >::value) = Clifford< Dim - 1 >::GMatrix::Identity();
    s_gamma[Dim - 1].bottomRightCorner(SpinorDim< Dim - 1 >::value, SpinorDim< Dim - 1 >::value) = -Clifford< Dim - 1 >::GMatrix::Identity();
  }
}


// To terminate the above algorithm, we need to specialize Dim = 2.
template< >
void Clifford< 2 >::generateGamma()
{
  assert(!s_gamma);
  s_gamma = new GMatrix[2];
  s_gamma[0] << _ci0, _ci1, _ci1, _ci0;
  s_gamma[1] << _ci0, -_ci1, _ci1, _ci0;
}

// It's rather simple to make this mechanism work in one dimension as well...
template< >
void Clifford< 1 >::generateGamma()
{
  assert(!s_gamma);

  s_gamma = new GMatrix[1];
  s_gamma[0] << 1;
}
