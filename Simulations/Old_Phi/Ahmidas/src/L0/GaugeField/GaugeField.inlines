template< typename Element, size_t D >
inline GaugeField< Element, D >::GaugeField(typename Weave< D >::DimArray const &dims)
{
  for(size_t idx = 0; idx < D; ++idx)
    d_fields[idx] = new Field< Element, D >(dims);
}

template< typename Element, size_t D >
inline GaugeField< Element, D >::GaugeField(Element const &val, typename Weave< D >::DimArray const &dims)
{
  for(size_t idx = 0; idx < D; ++idx)
    d_fields[idx] = new Field< Element, D >(val, dims);
}

template< typename Element, size_t D >
inline GaugeField< Element, D >::GaugeField(Field< Element, D > const &field)
{
  for(size_t idx = 0; idx < D; ++idx)
    d_fields[idx] = new Field< Element, D >(field);
}

template< typename Element, size_t D >
inline GaugeField< Element, D >::GaugeField(GaugeField const &other)
{
  for(size_t idx = 0; idx < D; ++idx)
    d_fields[idx] = new Field< Element, D >(*other.d_fields[idx]);
}

template< typename Element, size_t D >
inline GaugeField< Element, D >::~GaugeField()
{
  for(size_t idx = 0; idx < D; ++idx)
    delete d_fields[idx];
}

template< typename Element, size_t D >
inline Field< Element, D > &GaugeField< Element, D >::operator[](size_t idx)
{
  return (*d_fields[idx]);
}

template< typename Element, size_t D >
inline Field< Element, D > const &GaugeField< Element, D >::operator[](size_t idx) const
{
  return (*d_fields[idx]);
}

template< typename Element, size_t D >
inline void GaugeField< Element, D >::randomize()
{
  for (size_t idx = 0; idx < D; ++idx)
    d_fields[idx]->randomize();
}

template< typename Element, size_t D >
inline typename Weave< D >::DimArray const &GaugeField< Element, D >::dims() const
{
  return d_fields[0]->dims();
}

template< typename Element, size_t D >
size_t GaugeField< Element, D >::volume() const
{
  return d_fields[0]->volume();
}


template< typename Element, size_t D >
GaugeField< Element, D > &GaugeField< Element,D >::shift(int const &idx)
{
  for (size_t idx = 0; idx < D; ++idx)
    d_fields[idx]->shift(idx);
  return *this;
}
