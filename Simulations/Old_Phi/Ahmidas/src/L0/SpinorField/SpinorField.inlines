template< typename Element, size_t D >
inline SpinorField< Element, D > &SpinorField< Element, D >::operator*=(typename Clifford< D >::GMatrix const &gamma)
{
  d_phase = gamma * d_phase;
  return *this;
}

template< typename Element, size_t D >
inline SpinorField< Element, D > operator*(typename Clifford< D >::GMatrix const &gamma, SpinorField< Element, D > const &spinor)
{
  return SpinorField< Element, D >(spinor, gamma);
}

template< typename Element, size_t D >
template< typename Scalar >
inline SpinorField< Element, D > &SpinorField< Element, D >::operator*=(Scalar const &scalar)
{
  for (size_t dim = 0; dim < SpinorDim< D >::value; ++dim)
    for (size_t idx = 0; idx < d_fields[dim]->volume(); ++idx)
      d_fields[dim]->coeff(idx) *= scalar;
}

template< typename Element, size_t D >
SpinorField< Element, D > &SpinorField< Element, D >::operator+=(SpinorField< Element, D > const &other)
{
  // We need to take care of the phases properly, so some bookkeeping is needed
  Eigen::Matrix< int, SpinorDim< D >::value, 1 > myPerm;
  Eigen::Matrix< int, SpinorDim< D >::value, 1 > hisPerm;

  for (size_t idx = 0; idx < SpinorDim< D >::value; ++idx)
  {
    myPerm[idx]  = (std::abs(std::real(d_phase[idx])) + std::abs(std::imag(d_phase[idx]))) - 1;
    hisPerm[idx] = (std::abs(std::real(other.d_phase[idx])) + std::abs(std::imag(other.d_phase[idx]))) - 1;
  }

  for (size_t comp = 0; comp < SpinorDim< D >::value; ++comp)
  {
    size_t matchingCoef = std::find(hisPerm.data(), hisPerm.data() + SpinorDim< D >::value, myPerm[comp]) - hisPerm.data();
    assert(matchingCoef != hisPerm.size());

    Core::Field< Element, D > &left = *(d_fields[comp]);
    Core::Field< Element, D > const &right = *(other.d_fields[matchingCoef]);

    std::complex< double > phaseLeft = std::polar(std::arg(std::complex< double >(real(d_phase[comp]), imag(d_phase[comp])) * _pi_2));
    std::complex< double > phaseRight = std::polar(std::arg(std::complex< double >(real(other.d_phase[comp]), imag(other.d_phase[comp])) * _pi_2));

    d_fields[comp]->isolate();
    for (size_t idx = 0; idx < d_fields[comp]->volume(); ++idx)
      left.coeff(idx) = phaseLeft * left.coeff(idx) + phaseRight * right.coeff(idx);
  }

  for (size_t idx = 0; idx < D; ++idx)
    d_phase.coeffRef(idx) = std::complex< int >(myPerm.coeff(idx), 0) + 1;

  return *this;
}

template< typename Element, size_t D >
SpinorField< Element, D > &SpinorField< Element, D >::operator-=(SpinorField< Element, D > const &other)
{
  // We need to take care of the phases properly, so some bookkeeping is needed
  Eigen::Matrix< int, SpinorDim< D >::value, 1 > myPerm;
  Eigen::Matrix< int, SpinorDim< D >::value, 1 > hisPerm;

  for (size_t idx = 0; idx < SpinorDim< D >::value; ++idx)
  {
    myPerm[idx]  = (std::abs(std::real(d_phase[idx])) + std::abs(std::imag(d_phase[idx]))) - 1;
    hisPerm[idx] = (std::abs(std::real(other.d_phase[idx])) + std::abs(std::imag(other.d_phase[idx]))) - 1;
  }

  for (size_t comp = 0; comp < SpinorDim< D >::value; ++comp)
  {
    size_t matchingCoef = std::find(hisPerm.data(), hisPerm.data() + SpinorDim< D >::value, myPerm[comp]) - hisPerm.data();
    assert(matchingCoef != hisPerm.size());

    Core::Field< Element, D > &left = *(d_fields[comp]);
    Core::Field< Element, D > const &right = *(other.d_fields[matchingCoef]);

    std::complex< double > phaseLeft = std::polar(std::arg(std::complex< double >(real(d_phase[comp]), imag(d_phase[comp])) * _pi_2));
    std::complex< double > phaseRight = std::polar(std::arg(std::complex< double >(real(other.d_phase[comp]), imag(other.d_phase[comp])) * _pi_2));

    d_fields[comp]->isolate();
    for (size_t idx = 0; idx < d_fields[comp]->volume(); ++idx)
      left.coeff(idx) = phaseLeft * left.coeff(idx) - phaseRight * right.coeff(idx);
  }

  for (size_t idx = 0; idx < D; ++idx)
    d_phase.coeffRef(idx) = std::complex< int >(myPerm.coeff(idx), 0) + 1;

  return *this;
}