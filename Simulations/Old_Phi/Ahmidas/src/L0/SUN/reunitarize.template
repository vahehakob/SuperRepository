template< typename Mat >
void SUN::reunitarize(Mat &mat)
{
  // Project into U(N) using an iterative procedure:
  // M = Q.S; 1/Q = Q*; S* = S -> (1/M)* = (1/Q.1/S)* = (Q*.1/S)* = Q.1/S
  // 0.5 (M + (1/M)*) = 0.5 (Q.S + Q.1/S) = 0.5 Q(S + 1/S)
  // 0.5 (S + 1/S) will tend to 1 after a small number of iterations
  Mat old;
  do
  {
    old = mat;
    Mat minv = mat.inverse();
    std::complex< double > gamma = sqrt(minv.norm() / mat.norm());
    mat = 0.5 * (gamma * mat + minv.conjugate().transpose() / gamma);
  }
  while ((mat - old).norm() > (2E-16 * Mat::ColsAtCompileTime * Mat::ColsAtCompileTime));

  // Now to imply the condition for the special unitary group.
  mat /= std::pow(mat.determinant(), 1 / Mat::ColsAtCompileTime);
}
