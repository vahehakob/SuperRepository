template< typename Element, size_t D >
void Metropolis(GaugeField< Element, D > &gf, double beta, double step, size_t totalSweeps)
{
  static size_t const Nc = Element::RowsAtCompileTime;
  size_t countacc(0);
  Field< Element, D > plaq_diff(gf.dims());

  static double innerStep = step;

  Field< Element, D > refresh(gf.dims());
  for (size_t sweep = 0; sweep < totalSweeps; ++sweep)
  {
    for (size_t mu = 0; mu < D; ++mu)
    {
      refresh.randomize(); // NOTE This could be a global method too (specialization of Literal) -- AD

      refresh = N(innerStep) * refresh + N(Element::Identity().eval());
      for (size_t idx = 0; idx < refresh.volume(); ++idx)
        SUN::reunitarize(refresh[idx]); // NOTE Not yet defined globally, should be method in Field -- AD

      Field< Element, D > newField(gf.dims()); // NOTE Make constructor from expression -- AD
      // NOTE Memory sharing issue occurred here after using copy constructor and expression -- AD
      newField = gf[mu] * refresh;

      plaq_diff = N(Element::Constant(0.0));
      for(size_t nu = 0; nu < D; ++nu)
      {
        if (mu == nu)
          continue;

        plaq_diff += (newField - gf[mu]) * (staple_up(gf, mu, nu) + staple_down(gf, mu, nu));
      }

      for (size_t idx = 0; idx < newField.volume(); ++idx)
      {
        double deltaAction = -(beta / Nc) * real(plaq_diff[idx].trace());
        if (deltaAction < 0 || std::exp(-deltaAction) > Base::Random::fastUniform())
        {
          gf[mu][idx] = newField[idx];
          ++countacc;
        }
      }
    }
  }

  double acceptance = static_cast< double >(countacc) / (totalSweeps * D * gf.volume());
  innerStep += (acceptance - 0.80);
  double totalAction = 0;
  for (size_t nu = 0; nu < D; ++nu)
    for (size_t mu = 0; mu < nu; ++mu)
      totalAction += (real(plaquette(gf, mu, nu).sum().trace()) / (gf.volume() * Nc));
  std::cout << "Plaquette: " << totalAction / (D * (D - 1) / 2) << '\n';
}
template< typename Element, size_t D >




void Metropolis2(GaugeField< Element, D > &gf, double beta, double step, size_t totalSweeps)
{
  static size_t const Nc = Element::RowsAtCompileTime;
  size_t countacc(0);
  Field< Element, D > plaq_diff(gf.dims());

  static double innerStep = step;

  Field< Element, D > refresh(gf.dims());
  for (size_t sweep = 0; sweep < totalSweeps; ++sweep)
  {
    for (size_t mu = 0; mu < D; ++mu)
    {
      refresh.randomize(); // NOTE This could be a global method too (specialization of Literal) -- AD

      refresh = N(innerStep) * refresh + N(Element::Identity().eval());
      for (size_t idx = 0; idx < ( refresh.volume() / 2 ); ++idx)
        SUN::reunitarize(refresh[idx]); // NOTE Not yet defined globally, should be method in Field -- AD

      Field< Element, D > newField(gf.dims()); // NOTE Make constructor from expression -- AD
      // NOTE Memory sharing issue occurred here after using copy constructor and expression -- AD
      newField.atOdd[idx] = gf.atOdd[mu] * refresh[idx];

      plaq_diff = N(Element::Constant(0.0));
      for(size_t nu = 0; nu < D; ++nu)
      {
        if (mu == nu)
          continue;

        plaq_diff += (newField - gf[mu]) * (staple_up(gf, mu, nu) + staple_down(gf, mu, nu));
      }

      for (size_t idx = 0; idx < newField.volume(); ++idx)
      {
        double deltaAction = -(beta / Nc) * real(plaq_diff[idx].trace());
        if (deltaAction < 0 || std::exp(-deltaAction) > Base::Random::fastUniform())
        {
          gf[mu][idx] = newField[idx];
          ++countacc;
        }
      }
    }
  }

  double acceptance = static_cast< double >(countacc) / (totalSweeps * D * gf.volume());
  innerStep += (acceptance - 0.80);
  double totalAction = 0;
  for (size_t nu = 0; nu < D; ++nu)
    for (size_t mu = 0; mu < nu; ++mu)
      totalAction += (real(plaquette(gf, mu, nu).sum().trace()) / (gf.volume() * Nc));
  std::cout << "Plaquette: " << totalAction / (D * (D - 1) / 2) << '\n';
}