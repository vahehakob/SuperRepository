namespace Base
{
namespace IO
{
template< typename IOClass, typename Element, size_t L, size_t T >
void Bridge< IOClass, Element, L, T >::loadDataFromIO()
{
  size_t written = 0; // Number of locally written elements
  // We assume Element is natively a collection of doubles
  size_t const elementSize = sizeof(Element) / sizeof(double);

  // We process all input as chars, to avoid any unpleasantness with floating point registers.
  if (d_field.d_grid.rank()) // Prepare to receive
  {
    char *fileBuffer = new char[elementSize * sizeof(double) * d_field.d_grid.contiguousBlock()];
    for (size_t ctr = 0; ctr < (d_field.d_grid.localVolume() / d_field.d_grid.contiguousBlock()); ++ctr, written += d_field.d_grid.contiguousBlock())
    {
      d_field.d_grid.grid().Recv(fileBuffer, d_field.d_grid.contiguousBlock() * elementSize * sizeof(double), MPI::BYTE, 0, Core::TAG_FILE_DISTRIBUTION);
      std::copy(reinterpret_cast< double* >(fileBuffer),
                reinterpret_cast< double* >(fileBuffer) + (d_field.d_grid.contiguousBlock() * elementSize),
                reinterpret_cast< double* >(d_field.d_field + written));
    }
    delete[] fileBuffer;
    return;
  }

  // At this point, we know we're node 0
  // Check the content of this file for a simple sanity condition -- is there enough data to begin with.
  char *fileBuffer = new char[elementSize * sizeof(double) * d_field.d_grid.contiguousBlock()];

  size_t nBlocks = d_field.d_grid.totalVolume() / d_field.d_grid.contiguousBlock();
  for (size_t ctr = 0; ctr < nBlocks; ++ctr)
  {
    d_io.read(fileBuffer, d_field.d_grid.contiguousBlock() * elementSize * sizeof(double));
    if (d_io.fail())
    {
      std::cerr << "Unexpected error during I/O.\nAborting." << std::endl;
      MPI::COMM_WORLD.Abort(EIO);
    }

    size_t destination = d_field.d_grid.rank(ctr * d_field.d_grid.contiguousBlock());
    if (!destination) // This block of data should be stored locally
    {
      std::copy(reinterpret_cast< double* >(fileBuffer),
                reinterpret_cast< double* >(fileBuffer) + (d_field.d_grid.contiguousBlock() * elementSize),
                reinterpret_cast< double* >(d_field.d_field + written));
      written += d_field.d_grid.contiguousBlock();
      continue;
    }
    d_field.d_grid.grid().Send(fileBuffer, d_field.d_grid.contiguousBlock() * elementSize * sizeof(double), MPI::BYTE, destination, Core::TAG_FILE_DISTRIBUTION);
  }
  delete[] fileBuffer;
}
}
}