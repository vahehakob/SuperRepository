template< typename Element >
void Tool::IO::saveScidac(Core::Field< Element > const &field, std::string const &filename)
{
  Base::Weave weave(field.L(), field.T());

  weave.barrier();

  int const nprocs((weave.d_grid.grid()).Get_size());
  int const rank((weave.d_grid.grid()).Get_rank());

  // the main work has to be done by the writer holding the element at the origin
  int const root_rank = weave.d_grid.rank(size_t(0));

  weave.barrier();
//   if (weave.isRoot())
//   {
//     std::cout << "dimSizes: "
//             << (weave.d_grid).dimSize(Base::idx_T) << " "
//             << (weave.d_grid).dimSize(Base::idx_Z) << " "
//             << (weave.d_grid).dimSize(Base::idx_Y) << " "
//             << (weave.d_grid).dimSize(Base::idx_X) << " "
//             << std::endl;
//     std::cout << "dims: "
//             << (weave.d_grid).dim(Base::idx_T) << " "
//             << (weave.d_grid).dim(Base::idx_Z) << " "
//             << (weave.d_grid).dim(Base::idx_Y) << " "
//             << (weave.d_grid).dim(Base::idx_X) << " "
//             << std::endl;
//     std::cout << "sizes: "
//             << (weave.d_grid).size(Base::idx_T) << " "
//             << (weave.d_grid).size(Base::idx_Z) << " "
//             << (weave.d_grid).size(Base::idx_Y) << " "
//             << (weave.d_grid).size(Base::idx_X) << " "
//             << std::endl;
//
//
//   }
  std::cout.flush();
  weave.barrier();


  size_t const blockSize = (weave.d_grid).contiguousBlock();
  size_t const numBlocks = weave.localVolume()/blockSize;

  size_t globalDimSize[4];
  globalDimSize[Base::idx_T] = field.L()*field.L()*field.L();
  globalDimSize[Base::idx_Z] = field.L()*field.L();
  globalDimSize[Base::idx_Y] = field.L();
  globalDimSize[Base::idx_X] = 1;

  size_t jumpS[4] = {0, 0, 0, 0}; // information where to jump
  size_t jumpN[4] = {weave.localVolume(), weave.localVolume(),
                     weave.localVolume(), weave.localVolume()
                    }; // information when to perform which jump

  if (numBlocks > 1)
  {
    // determine "lowest" dimension that is distributed to more than 1 process
    size_t idx(0);
    while (((weave.d_grid).dim(idx) == 1) && (idx < 4))
      ++idx;
    assert(idx < 3); // this should not happen, because there have to be at least
    // two distributed dimensions for more than one contiguous block per process
    if(idx == Base::idx_Z) // assume that the index is 2
    {
      jumpS[idx] = globalDimSize[Base::idx_T];
      jumpN[idx] = 1;
    }
    else if(idx == Base::idx_Y) // assume that the index is 1
    {
      jumpS[idx  ] = globalDimSize[Base::idx_Z];
      jumpS[idx+1] = globalDimSize[Base::idx_Z]*((((weave.d_grid).dim(Base::idx_Z)-1)*(weave.d_grid).size(Base::idx_Z))+1);
      jumpN[idx  ] = 1;
      jumpN[idx+1] = (weave.d_grid).size(idx+1);
    }
    else if(idx == Base::idx_X) // assume that the index is 0
    {
      jumpS[idx  ] = globalDimSize[Base::idx_Y];
      jumpS[idx+1] = globalDimSize[Base::idx_Y]*((((weave.d_grid).dim(Base::idx_Y)-1)*(weave.d_grid).size(Base::idx_Y))+1);
      jumpS[idx+2] = jumpS[idx+1]
                     + globalDimSize[Base::idx_Z]*((((weave.d_grid).dim(Base::idx_Z)-1)*(weave.d_grid).size(Base::idx_Z)));
      jumpN[idx  ] = 1;
      jumpN[idx+1] = (weave.d_grid).size(idx+1);
      jumpN[idx+2] = jumpN[idx+1]*(weave.d_grid).size(idx+2);
    }
  }

//   if (weave.isRoot())
//   {
//     std::cout << "local volume: " << weave.localVolume() << std::endl;
//     std::cout << "contiguous block size: " << blockSize << std::endl;
//     std::cout << "number of contiguous blocks per process: " << numBlocks << std::endl;
//     std::cout << "gaps between starting indices of contiguous blocks: "
//               << jumpS[Base::idx_Z] << " (Z),  "
//               << jumpS[Base::idx_Y] << " (Y),  "
//               << jumpS[Base::idx_X] << " (X)"
//               << std::endl;
//     std::cout << "jumpN "
//               << jumpN[Base::idx_Z] << " (Z),  "
//               << jumpN[Base::idx_Y] << " (Y),  "
//               << jumpN[Base::idx_X] << " (X)"
//               << std::endl;
//   }

  size_t const *coords = (weave.d_grid).coords();

  unsigned long elem_offset(0);

  // each node has to find his own offset
  for (size_t idx = 0; idx < 4; idx++)
  {
    // offset in each dimension is the process' coordinate index times the
    // global size of (one "slice" of) this direction times the local size in this direction
    elem_offset += coords[idx] * globalDimSize[idx] * ((weave.d_grid).size(idx));
  }
//   std::cout << "I am process with coordinates ("
//             << coords[Base::idx_T] << " "
//             << coords[Base::idx_Z] << " "
//             << coords[Base::idx_Y] << " "
//             << coords[Base::idx_X] << " "
//             << ") and my offset is " << elem_offset << std::endl;


  assert(elem_offset < weave.globalVolume());

  weave.barrier();



  bool OK = false;

  // FIX THIS: this is a workaround because sometimes the fstream does not write the lime header
  // (for some unresoled reason)
  do
  {
    {
      size_t pos = 0;

      // 2nd argument is boolean and determines whether the writer is allowed to write the header,
      // which only the writer of the process holding the Element(s) to be written first may do
      Lime::Writer writer(filename, rank == root_rank);

      assert(writer.good());

      weave.barrier();

      if (rank == root_rank)
      {
        std::cout << "writing file " << filename << "..." << std::endl;

        writer.newRecord("propagator-type", pos, 0);

        std::string const info_string_1("DiracFermion_Sink");
        writer.write(info_string_1.c_str(), uint64_t(info_string_1.length()*sizeof(char)));
        writer.finishMessage();
        pos = writer.closeRecord();

        std::cout << "record 1 (info) written, " << std::flush;

        writer.newRecord("etmc-propagator-format",pos, 0);

        std::string info_string;
        info_string.reserve(512);
        std::ostringstream oss;
        oss << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<etmcFormat>\n<field>diracFermion</field>\n";
        oss << "<precision>64</precision>\n";
        oss << "<flavours>1</flavours>\n";
        oss << "<lx>" << field.L() << "</lx>\n";
        oss << "<ly>" << field.L() << "</ly>\n";
        oss << "<lz>" << field.L() << "</lz>\n";
        oss << "<lt>" << field.T() << "</lt>\n";
        oss << "</etmcFormat>";
        info_string = oss.str();
        writer.write(info_string.c_str(), uint64_t(info_string.length()*sizeof(char)));
        writer.finishMessage();
        pos = writer.closeRecord();

        std::cout << "record 2 (info) written,\n";
        std::cout << "preparing for parallel writing of record 3 (data) ..." << std::flush;

        writer.newRecord("scidac-binary-data", pos, weave.globalVolume() * sizeof(Element));
        writer.seekp(0);
        char dummy[sizeof(Element)];
        std::fill_n(dummy, sizeof(Element), char(0));
        writer.fill(reinterpret_cast< Element &>(*dummy), weave.globalVolume());
        assert(writer.good());
        std::cout << " done." << std::endl;
      }
      weave.broadcast(&pos, 1, root_rank);
      weave.barrier();

      // all processes but one have been idle so far and have to catch up
      if(rank != root_rank)
      {
        writer.newRecord("scidac-binary-data", pos, weave.globalVolume() * sizeof(Element));
        assert(writer.good());
      }

      weave.barrier();

      size_t const elementSize = sizeof(Element) / sizeof(double);

      if (weave.isRoot())
        std::cout << "writing record 3 (data) ..." << std::flush;

      double buffer[elementSize];

      for (size_t idxBlock = 0; idxBlock < numBlocks; idxBlock++)
      {
        // each writer jumps to the position it is supposed to start writing at
        writer.seekp(elem_offset * sizeof(Element));
        assert(writer.good());

        for (size_t siteIdx = idxBlock*blockSize; siteIdx < (idxBlock+1)*blockSize; ++siteIdx)
        {
          std::copy(reinterpret_cast< double const* >(&(field.constPhysicalIndex(siteIdx))),
                    reinterpret_cast< double const* >(&(field.constPhysicalIndex(siteIdx))) + elementSize,
                    buffer);
          if (!Base::bigEndian)
          {
            Base::swapEndian(buffer, buffer + elementSize, sizeof(double));
          }
          writer.write(buffer, elementSize);
        }
        elem_offset += (idxBlock+1) % jumpN[Base::idx_Z] == 0 ? jumpS[Base::idx_Z] :
                       (idxBlock+1) % jumpN[Base::idx_Y] == 0 ? jumpS[Base::idx_Y] : jumpS[Base::idx_X];
      }

      writer.finishMessage();
      writer.closeRecord();

      assert(writer.good());
    }
    weave.barrier();

    if (weave.isRoot())
      std::cout << " done.\nwill now check file ... " << std::flush;

    weave.barrier();

    if(rank == root_rank)
    {
      std::ifstream fileChecker(filename.c_str());
      assert(fileChecker.good());
      int dummy = fileChecker.get();
      fileChecker.seekg(144);
      char dummyData = fileChecker.get();
      fileChecker.close();
      OK = bool(dummy != 0 && dummyData == 'D');

      if (OK)
        std::cout << "OK!" << std::endl;
      else
      {
        std::cerr << "not OK, trying again!" << std::endl;
      }
    }

    weave.broadcast(&OK, 1, root_rank);

    weave.barrier();

    if (!OK)
      exit(1);
  }
  while(!OK);

}
