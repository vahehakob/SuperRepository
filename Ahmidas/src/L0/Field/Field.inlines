template< typename Element, size_t D >
inline Field< Element, D >::Field(typename Weave< D >::DimArray const &dimensions)
  : d_references(new size_t(1)), d_weave(new Weave< D >(dimensions)), d_field(new Element[localVolume()])
{
//   std::cerr << "[DEBUG]  Created " << d_weave << std::endl;
}

template< typename Element, size_t D >
inline Field< Element, D >::Field(Element const &value, typename Weave< D >::DimArray const &dims)
  : d_references(new size_t(1)), d_weave(new Weave< D >(dims)), d_field(new Element[localVolume()])
{
//   std::cerr << "[DEBUG]  Created " << d_weave << std::endl;
  std::fill(d_field, d_field + localVolume(), value);
}

template< typename Element, size_t D >
inline Field< Element, D > &Field< Element, D >::operator=(Field< Element, D > const &other)
{
  if (&other == this)
    return *this;
  destroy();
  d_references = other.d_references;
  ++(*d_references);
  d_field = other.d_field;
  d_weave = other.d_weave;
  return *this;
}

template< typename Element, size_t D >
template< typename Derived >
inline Field< Element, D > &Field< Element, D >::operator=(BaseFieldExpr< Derived > const &other)
{
  for (size_t index = 0; index < localVolume(); ++index)
    coeff(index) = other[index];
  return *this;
}

template< typename Element, size_t D >
template< typename Derived >
inline Field< Element, D > &Field< Element, D >::operator+=(BaseFieldExpr< Derived > const &other)
{
  for (size_t index = 0; index < localVolume(); ++index)
    coeff(index) += other[index];
  return *this;
}

template< typename Element, size_t D >
template< typename Derived >
inline Field< Element, D > &Field< Element, D >::operator-=(BaseFieldExpr< Derived > const &other)
{
  for (size_t index = 0; index < localVolume(); ++index)
    coeff(index) -= other[index];
  return *this;
}

template< typename Element, size_t D >
inline Field< Element, D >::~Field()
{
//   std::cerr << "[DEBUG]  Destructing " << d_weave << std::endl;
  destroy();
}

template< typename Element, size_t D >
inline void Field< Element, D >::destroy()
{
  (*d_references) -= 1;
  if ((*d_references) == 0)
  {
    delete d_references;
    delete d_weave;
    delete[] d_field;
  }
}

template< typename Element, size_t D >
inline Element &Field< Element, D >::coeff(size_t const idx)
{
  return d_field[d_weave->physIdx(idx)];
}

template< typename Element, size_t D >
inline Element const &Field< Element, D >::coeff(size_t const idx) const
{
  return d_field[d_weave->physIdx(idx)];
}

template< typename Element, size_t D >
inline Element &Field< Element, D >::coeff(Field< Element, D > *me, size_t const idx)
{
  return me->coeff(idx);
}

template< typename Element, size_t D >
inline Element const &Field< Element, D >::coeff(Field< Element, D > const *me, size_t const idx)
{
  return me->coeff(idx);
}

template< typename Element, size_t D >
inline size_t Field< Element, D >::volume() const
{
  return d_weave->volume();
}

template< typename Element, size_t D >
inline size_t Field< Element, D >::localVolume() const
{
  return d_weave->localVolume();
}

template< typename Element, size_t D >
inline void Field< Element, D >::randomize()
{
  for (size_t idx = 0; idx < localVolume(); ++idx) 
    SUN::randomize(d_field[idx]);
}

template< typename Element, size_t D >
inline Element Field< Element, D >::sum()
{
  Element aggregate;
  for (size_t idx = 0; idx < localVolume(); ++idx)
    aggregate += d_field[idx];
  return d_weave->globalSum(aggregate);
}

template< typename Element, size_t D >
inline typename Weave< D >::DimArray const &Field< Element, D >::dims() const
{
  return d_weave->dims();
}

template< typename Element, size_t D >
inline Field< typename Element::Scalar, D > Field< Element, D >::trace() const
{
  Field< typename Element::Scalar, D > result(dims());
  for (size_t idx = 0; idx < localVolume(); ++idx)
    result.coeff(idx) = coeff(idx).trace();
  return result;
}

template< typename Element, size_t D >
Element &Field< Element, D >::operator[](size_t const &index)
{
  return coeff(index);
}

template< typename Element, size_t D >
Element const &Field< Element, D >::operator[](size_t const &index) const
{
  return coeff(index);
}

template< typename Element, size_t D >
inline Field< Element, D >::Field(Field< Element, D > const &other)
  : d_references(other.d_references), d_weave(other.d_weave), d_field(other.d_field)
{
//   std::cerr << "[DEBUG]  Created " << d_weave << std::endl;
  (*d_references) += 1;
}

template< typename Element, size_t D >
inline Element &Field< Element, D >::operator[](typename Weave< D >::DimArray const &idx)
{
  isolate();
  return coeff(idx);
}

template< typename Element, size_t D >
inline Element const &Field< Element, D >::operator[](typename Weave< D >::DimArray const &idx) const
{
  return coeff(idx);
}
template< typename Element, size_t D >
inline Element &Field< Element, D >::coeff(typename Weave< D >::DimArray const &idx)
{
  return d_field[d_weave->coordToIndex(idx)];
}

template< typename Element, size_t D >
inline Element const &Field< Element, D >::coeff(typename Weave< D >::DimArray const &idx) const
{
  return d_field[d_weave->coordToIndex(idx)];
}

template< typename Element, size_t D >
inline Element &Field< Element, D >::atEven(size_t const index)
{
  isolate();
  return d_field[d_weave->physEvenOddIdx(index, false)];
}

template< typename Element, size_t D >
inline const Element &Field< Element, D >::atEven(size_t const index) const
{
  return d_field[d_weave->physEvenOddIdx(index, false)];
}

template< typename Element, size_t D >
inline Element &Field< Element, D >::atOdd(size_t const index)
{
  isolate();
  return d_field[d_weave->physEvenOddIdx(index, true)];
}

template< typename Element, size_t D >
inline const Element &Field< Element, D >::atOdd(size_t const index) const
{
  return d_field[d_weave->physEvenOddIdx(index, true)];
}
